package com.opengamma.strata.product.fxopt;

import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.basics.currency.CurrencyPair;
import com.opengamma.strata.basics.index.FxIndex;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.product.common.LongShort;
import com.opengamma.strata.product.option.BarrierType;
import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.NoSuchElementException;

/**
 *
 */
@BeanDefinition
public final class ResolvedFxDigitalOption
    implements ResolvedFxOption, ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull")
  private final BarrierType barrierType;

  @PropertyDefinition(validate = "ArgChecker.notNegativeOrNaN")
  private final double strikePrice;

  @PropertyDefinition(validate = "notNull")
  private final ZonedDateTime expiry;

  @PropertyDefinition(validate = "notNull")
  private final FxIndex index;

  @PropertyDefinition(validate = "notNull")
  private final LongShort longShort;

  /**
   * signed payment, positive (receive) if long
   * always in the counter currency (to be safe)
   */
  @PropertyDefinition(validate = "notNull")
  private final CurrencyAmount payment;

  @Override
  public CurrencyPair getCurrencyPair() {
    return this.index.getCurrencyPair();
  }

  @Override
  public CurrencyAmount getSignedNotional() {
    return this.payment;
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ResolvedFxDigitalOption}.
   * @return the meta-bean, not null
   */
  public static ResolvedFxDigitalOption.Meta meta() {
    return ResolvedFxDigitalOption.Meta.INSTANCE;
  }

  static {
    MetaBean.register(ResolvedFxDigitalOption.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ResolvedFxDigitalOption.Builder builder() {
    return new ResolvedFxDigitalOption.Builder();
  }

  private ResolvedFxDigitalOption(
      BarrierType barrierType,
      double strikePrice,
      ZonedDateTime expiry,
      FxIndex index,
      LongShort longShort,
      CurrencyAmount payment) {
    JodaBeanUtils.notNull(barrierType, "barrierType");
    ArgChecker.notNegativeOrNaN(strikePrice, "strikePrice");
    JodaBeanUtils.notNull(expiry, "expiry");
    JodaBeanUtils.notNull(index, "index");
    JodaBeanUtils.notNull(longShort, "longShort");
    JodaBeanUtils.notNull(payment, "payment");
    this.barrierType = barrierType;
    this.strikePrice = strikePrice;
    this.expiry = expiry;
    this.index = index;
    this.longShort = longShort;
    this.payment = payment;
  }

  @Override
  public ResolvedFxDigitalOption.Meta metaBean() {
    return ResolvedFxDigitalOption.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the barrierType.
   * @return the value of the property, not null
   */
  public BarrierType getBarrierType() {
    return barrierType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the strikePrice.
   * @return the value of the property
   */
  public double getStrikePrice() {
    return strikePrice;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the expiry.
   * @return the value of the property, not null
   */
  public ZonedDateTime getExpiry() {
    return expiry;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the index.
   * @return the value of the property, not null
   */
  public FxIndex getIndex() {
    return index;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the longShort.
   * @return the value of the property, not null
   */
  public LongShort getLongShort() {
    return longShort;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets signed payment, positive (receive) if long
   * always in the counter currency (to be safe)
   * @return the value of the property, not null
   */
  public CurrencyAmount getPayment() {
    return payment;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ResolvedFxDigitalOption other = (ResolvedFxDigitalOption) obj;
      return JodaBeanUtils.equal(barrierType, other.barrierType) &&
          JodaBeanUtils.equal(strikePrice, other.strikePrice) &&
          JodaBeanUtils.equal(expiry, other.expiry) &&
          JodaBeanUtils.equal(index, other.index) &&
          JodaBeanUtils.equal(longShort, other.longShort) &&
          JodaBeanUtils.equal(payment, other.payment);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(barrierType);
    hash = hash * 31 + JodaBeanUtils.hashCode(strikePrice);
    hash = hash * 31 + JodaBeanUtils.hashCode(expiry);
    hash = hash * 31 + JodaBeanUtils.hashCode(index);
    hash = hash * 31 + JodaBeanUtils.hashCode(longShort);
    hash = hash * 31 + JodaBeanUtils.hashCode(payment);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(224);
    buf.append("ResolvedFxDigitalOption{");
    buf.append("barrierType").append('=').append(JodaBeanUtils.toString(barrierType)).append(',').append(' ');
    buf.append("strikePrice").append('=').append(JodaBeanUtils.toString(strikePrice)).append(',').append(' ');
    buf.append("expiry").append('=').append(JodaBeanUtils.toString(expiry)).append(',').append(' ');
    buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
    buf.append("longShort").append('=').append(JodaBeanUtils.toString(longShort)).append(',').append(' ');
    buf.append("payment").append('=').append(JodaBeanUtils.toString(payment));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ResolvedFxDigitalOption}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code barrierType} property.
     */
    private final MetaProperty<BarrierType> barrierType = DirectMetaProperty.ofImmutable(
        this, "barrierType", ResolvedFxDigitalOption.class, BarrierType.class);
    /**
     * The meta-property for the {@code strikePrice} property.
     */
    private final MetaProperty<Double> strikePrice = DirectMetaProperty.ofImmutable(
        this, "strikePrice", ResolvedFxDigitalOption.class, Double.TYPE);
    /**
     * The meta-property for the {@code expiry} property.
     */
    private final MetaProperty<ZonedDateTime> expiry = DirectMetaProperty.ofImmutable(
        this, "expiry", ResolvedFxDigitalOption.class, ZonedDateTime.class);
    /**
     * The meta-property for the {@code index} property.
     */
    private final MetaProperty<FxIndex> index = DirectMetaProperty.ofImmutable(
        this, "index", ResolvedFxDigitalOption.class, FxIndex.class);
    /**
     * The meta-property for the {@code longShort} property.
     */
    private final MetaProperty<LongShort> longShort = DirectMetaProperty.ofImmutable(
        this, "longShort", ResolvedFxDigitalOption.class, LongShort.class);
    /**
     * The meta-property for the {@code payment} property.
     */
    private final MetaProperty<CurrencyAmount> payment = DirectMetaProperty.ofImmutable(
        this, "payment", ResolvedFxDigitalOption.class, CurrencyAmount.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "barrierType",
        "strikePrice",
        "expiry",
        "index",
        "longShort",
        "payment");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          return barrierType;
        case 50946231:  // strikePrice
          return strikePrice;
        case -1289159373:  // expiry
          return expiry;
        case 100346066:  // index
          return index;
        case 116685664:  // longShort
          return longShort;
        case -786681338:  // payment
          return payment;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ResolvedFxDigitalOption.Builder builder() {
      return new ResolvedFxDigitalOption.Builder();
    }

    @Override
    public Class<? extends ResolvedFxDigitalOption> beanType() {
      return ResolvedFxDigitalOption.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code barrierType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<BarrierType> barrierType() {
      return barrierType;
    }

    /**
     * The meta-property for the {@code strikePrice} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> strikePrice() {
      return strikePrice;
    }

    /**
     * The meta-property for the {@code expiry} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ZonedDateTime> expiry() {
      return expiry;
    }

    /**
     * The meta-property for the {@code index} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FxIndex> index() {
      return index;
    }

    /**
     * The meta-property for the {@code longShort} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LongShort> longShort() {
      return longShort;
    }

    /**
     * The meta-property for the {@code payment} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurrencyAmount> payment() {
      return payment;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          return ((ResolvedFxDigitalOption) bean).getBarrierType();
        case 50946231:  // strikePrice
          return ((ResolvedFxDigitalOption) bean).getStrikePrice();
        case -1289159373:  // expiry
          return ((ResolvedFxDigitalOption) bean).getExpiry();
        case 100346066:  // index
          return ((ResolvedFxDigitalOption) bean).getIndex();
        case 116685664:  // longShort
          return ((ResolvedFxDigitalOption) bean).getLongShort();
        case -786681338:  // payment
          return ((ResolvedFxDigitalOption) bean).getPayment();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ResolvedFxDigitalOption}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ResolvedFxDigitalOption> {

    private BarrierType barrierType;
    private double strikePrice;
    private ZonedDateTime expiry;
    private FxIndex index;
    private LongShort longShort;
    private CurrencyAmount payment;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ResolvedFxDigitalOption beanToCopy) {
      this.barrierType = beanToCopy.getBarrierType();
      this.strikePrice = beanToCopy.getStrikePrice();
      this.expiry = beanToCopy.getExpiry();
      this.index = beanToCopy.getIndex();
      this.longShort = beanToCopy.getLongShort();
      this.payment = beanToCopy.getPayment();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          return barrierType;
        case 50946231:  // strikePrice
          return strikePrice;
        case -1289159373:  // expiry
          return expiry;
        case 100346066:  // index
          return index;
        case 116685664:  // longShort
          return longShort;
        case -786681338:  // payment
          return payment;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          this.barrierType = (BarrierType) newValue;
          break;
        case 50946231:  // strikePrice
          this.strikePrice = (Double) newValue;
          break;
        case -1289159373:  // expiry
          this.expiry = (ZonedDateTime) newValue;
          break;
        case 100346066:  // index
          this.index = (FxIndex) newValue;
          break;
        case 116685664:  // longShort
          this.longShort = (LongShort) newValue;
          break;
        case -786681338:  // payment
          this.payment = (CurrencyAmount) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public ResolvedFxDigitalOption build() {
      return new ResolvedFxDigitalOption(
          barrierType,
          strikePrice,
          expiry,
          index,
          longShort,
          payment);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the barrierType.
     * @param barrierType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder barrierType(BarrierType barrierType) {
      JodaBeanUtils.notNull(barrierType, "barrierType");
      this.barrierType = barrierType;
      return this;
    }

    /**
     * Sets the strikePrice.
     * @param strikePrice  the new value
     * @return this, for chaining, not null
     */
    public Builder strikePrice(double strikePrice) {
      ArgChecker.notNegativeOrNaN(strikePrice, "strikePrice");
      this.strikePrice = strikePrice;
      return this;
    }

    /**
     * Sets the expiry.
     * @param expiry  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder expiry(ZonedDateTime expiry) {
      JodaBeanUtils.notNull(expiry, "expiry");
      this.expiry = expiry;
      return this;
    }

    /**
     * Sets the index.
     * @param index  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder index(FxIndex index) {
      JodaBeanUtils.notNull(index, "index");
      this.index = index;
      return this;
    }

    /**
     * Sets the longShort.
     * @param longShort  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder longShort(LongShort longShort) {
      JodaBeanUtils.notNull(longShort, "longShort");
      this.longShort = longShort;
      return this;
    }

    /**
     * Sets signed payment, positive (receive) if long
     * always in the counter currency (to be safe)
     * @param payment  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder payment(CurrencyAmount payment) {
      JodaBeanUtils.notNull(payment, "payment");
      this.payment = payment;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(224);
      buf.append("ResolvedFxDigitalOption.Builder{");
      buf.append("barrierType").append('=').append(JodaBeanUtils.toString(barrierType)).append(',').append(' ');
      buf.append("strikePrice").append('=').append(JodaBeanUtils.toString(strikePrice)).append(',').append(' ');
      buf.append("expiry").append('=').append(JodaBeanUtils.toString(expiry)).append(',').append(' ');
      buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
      buf.append("longShort").append('=').append(JodaBeanUtils.toString(longShort)).append(',').append(' ');
      buf.append("payment").append('=').append(JodaBeanUtils.toString(payment));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
